{"pageProps":{"blogPosts":[{"id":1,"title":"First Blog Post!","desc":"This is the first blog post on this site, and where I'll be talking about random things, from programming to robotics","tags":["meta","testing"],"url":"first-post-on-mee42-dot-dev","date":"2020-08-10","content":"here is some content! content is good! I like content.\n\nthere will be many newlines in the content\n```\nlets test some markdown features\n```\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\n*italics*\n\n**bold**\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nhere is `some code exceprts` which should be in monospace and `markdown`.\n\n[link to an example website](https://example.com)\n\n[link back to the main blog page](/blog)\n\n\n- a list\n- of several\n- `styled` unordered elements\n\n1. a list of\n1. ordered elements\n1. however the order is automatically generated\n\n| a table | vibe |\n| ------- | ---- |\n| HTML    | low vibe |\n| markdown | high vibe |\n\n> quoting someone\n> is nice\n\n\n```js\nvar React = require(\"react\");\nvar Markdown = require(\"react-markdown\");\n```"},{"id":7,"title":"blk_update_request, a debugging story","desc":"An issue I had, and want the solution to be on the Internet","tags":["hardware","troubleshooting"],"url":"blk_update_request","date":"2020-02-05","content":"```\nlf5 kernel: [   34.516541] blk_update_request: I/O error, dev sda, sector 1669071536\n```\nThis is an error I got, on my server, a week or so ago. \nEvery time I got the error, IO on the computer completely stopped.\nI search around the Internet, and there wasn't much that was helpful,\nso I'm writing this to maybe help someone with the same issue.\n\n\nAfter I started having this issue, I started having filesystem corruption on my disk.\nI'd recommend backing up everything as soon as possible, before attempting to debug,\nIt never hurts.\n\nFor a quick background on the error, a `blk_update_request: I/O error` is an issue with interfacing\nwith a data drive. You can see what drive my error is affecting (`/dev/sda`), and that it failed while trying to access sector `1669071536`.\n\nTurns out, in my case, I had a bad SATA cable. In addition to that, it seems like my motherboard *doesn't support* specific combinations of SATA port uses. When using ports #1 and #2, for example, only the first would be accessible. When using ports #1 and #3, it would freeze on boot. When using some other combinations, it would work.\n\n\n### Update\n\n**Turns out it was only a temporary fix. I had to replace the motherboard and drive. If you get `blk_update_request: I/O error`, check to make sure your backups still function properly.**"},{"id":8,"title":"Repairing a Macintosh Classic","desc":"Repairing a nonfunctional 1992 Mac Classic (Hopefully!)","tags":["hardware","troubleshooting","unreleased"],"url":"mac_repair","date":"2022-01-14","content":"The Macintosh Classic\n\n<figure>\n  <img\n  src=\"https://upload.wikimedia.org/wikipedia/commons/d/d8/Macintosh_classic.jpg\"\n  alt=\"A picture of a Mac Classic\"\n  title=\"Things looked classier in the past\">\n  <figcaption>\n    <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\" title=\"Creative Commons Attribution-Share Alike 3.0\">CC BY-SA 3.0</a>, <a href=\"https://commons.wikimedia.org/w/index.php?curid=10101\">Link</a>\n  </figcaption>\n</figure>\n\n\n\nReleased in 1990, sporting a slightly unimpressive 1MB of ram, a 8 MHz clock, and a 9-inch B&W CRT, the Macintosh Classic\nreleased at the cheap pricepoint of $1000. They sold like, half a million of these fancy beige boxes.\n\nAnd I've got one of them!\n\n(image)\n\nIt's not mine to keep, but a friend aquired one from a relative, and that's good enough for me.\nThe issue starts when we turn it on...\n\n<figure>\n    <img src=\"/line.jpg\" title=\"Carson hoodie reveal????\">\n    <figcaption>After turning it on.</figcaption>\n</figure>\n\nIt's a line! Unless you're a [Flatland](https://en.wikipedia.org/wiki/Flatland) fan,\nthis clearly isn't a functional computer. However, this isn't an issue you'll see on any modern computer - it's an issue with the [Cathode-Ray Tube (CRT)](https://en.wikipedia.org/wiki/Cathode-ray_tube) display used on the Mac.\n\n<figure>\n    <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b0/Cathode_ray_Tube.PNG\"\n         title=\"What would we do without stock wikipedia diagrams\"/>\n    <figcaption>\n    By <a href=\"https://en.wikipedia.org/wiki/User:Theresa_knott\" class=\"extiw\" title=\"en:User:Theresa knott\">Theresa Knott</a> - <a href=\"https://en.wikipedia.org/wiki/Image:Cathode_ray_Tube.PNG\" class=\"extiw\" title=\"en:Image:Cathode ray Tube.PNG\">en:Image:Cathode ray Tube.PNG</a>, <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\" title=\"Creative Commons Attribution-Share Alike 3.0\">CC BY-SA 3.0</a>, <a href=\"https://commons.wikimedia.org/w/index.php?curid=100143\">Link</a>\n    </figcaption>\n</figure>\n\nThe deflection coils (Magnets!) \"bend\" the electrons shot from the electron gun (The Cathode)\nto hit the right spot screen, which (coated in phosphor) emits light when hit by electrons.\n\nThere's two sets of deflection coils, one to control the horizontal bending and one to control the vertical bending of the electrons. Looking at the signals, they should look both *something* like a sawtooth, going from top to bottom (or left to right) slowly while sending the electrons and then \"jumping\" back to the start to repeat the process. \n\n\n<figure>\n    <img src=\"https://www.eevblog.com/forum/repair/help-fixing-a-crt-terminal/?action=dlattach;attach=1217909;image\"\n         title=\"I need to figure out how to take multimeter screenshots that look this pretty\"/>\n    <figcaption>\n<a href=\"https://www.eevblog.com/forum/repair/help-fixing-a-crt-terminal/50/\">Stolen from a webpage about repairing CRTS</a>    </figcaption>\n</figure>\n\nThat's what the **horizontal** sweep *should* look like (or, some noisy derivative of it, doesn't particularly matter).\nHowever, when probing the wire going directly from the Analog Control Board to the magnet coils, we see something a bit different.\n\n\n<figure>\n  <img\n  src=\"/oscope.jpg\"\n  alt=\"A picture of a Mac Classic\"\n  title=\"It kinda looks like McDonalds.\">\n  <figcaption>\n    Probing the wire going to the horizontal yoke on the CRT. I don't know why they're called yokes, don't ask me.\n  </figcaption>\n</figure>\n\n\n\n(You might see the voltage is up in the hundreds. The electron gun itself runs at about 860.\nPropery safety is a vital part of every hobbiest electrician's toolkit something something something - \nI highly recommend high voltage gloves. 10mA through your heart is instant death)\n\nThis is a weird graph. I literally have no clue why it's like this,\nbut I think it explains why the line across the screen doesn't fully reach the edges.\nWe'll come back to this.\n\n\nThe **vertical** sweep, on the other hand, has no signal on it whatsoever.\nI would include the picture, but it's literally a horizontal line.\nThis explains why the CRT is drawing a line across the screen -\nit just paints every single row of the screen, on the single row in the middle.\n\n\n\n-----------\n\n\n\nAccording to the Internet, these capacitors on these fucking machines just kill themselves after like a decade, and it's a miracle that this machine is still turning on at all.\nFucking Apple, man. I think I'm going to have to buy new caps, desolder the old ones and install new ones\non both the Logic Board and the Analog Power Board.\n\n\n-----------\n\nTo be continued, hopefully the new capacitors + new cmos battery fixes the CRT issues."},{"id":4,"title":"Some thoughts on optimization","desc":"A short introduction to basic optimization","tags":["compilers","optimization"],"url":"optimization-thoughts","date":"2020-10-21","content":"# Optimization Thoughts\n\nOptimization is a large topic, and only some basics are going to be covered here.\nWe'll be talking about *AST optimizations* today, as it's the most universal form of optimization, independent of backend.\n\nAn AST is an *Abstract Syntax Tree*. This is just how a compiler represents the source code in memory. While we'll being doing a lot of Source Code to Source Code changes for each optimization step, keep in mind that there are not stringy values being manipulated, but a more efficient tree data structure. For the sake of this page, we'll just be working with readable source code.\n\nLet's take a very simple program\n```kt\nfun main() {\n     val a = 7\n     var c = a\n     c += 1\n     val b = a*2 + foo(a) + c\n     if(b < a) error(\"reached illegal state\")\n     while(b > c) c+=c; // do some fun doubling\n     println(a + b + c);\n}\n\nfun foo(i: Int): Int {\n    return if(i < 2) 19 else 18;\n}\n```\nNow, let's optimize this down:\n\n\n### Constant Value Propagation\n\nConstant Value Propagation, or CVP for short on this page, is taking values that are constant (or static) and propagating them across the program. It's effectively inlining variables that have constant, known values. For example,\n```kt\nval a = 7\nval b = a\nval c = a + a\n```\ncan just be\n```kt\nval a = 7\nval b = 7\nval c = 7 + 7\n```\nThis is powerful because it eliminates the overhead of fetching variables like constants. This doesn't seem *that* helpful at first, but it becomes much more useful when combined with other optimizations.\n\nOne shortcoming of CVP is that it requires all values to be known at compile time, and for all values to be stored in **final**, or constant variables, so they do not change.\n\nLet's put our example program through some constant value propagation.\n\n```kt\nfun main() {\n     val a = 7 // this is able to be propagated easily\n     var c = 7 // this is not, as it is mutable (it might change). However, we still inline the 7 from 'a'\n     c += 1\n     val b = 7*2 + foo(7) + c // here we inline the value for 'a'\n     if(b < 7) error(\"reached illegal state\") // everywhere we use 'a' we can replace it with 7\n     while(b > c) c+=c; \n     println(7 + b + c);\n}\n```\n\n### Expression Folding\n\nExpression Folding is pretty simple: pure operations, like arithmetics on pure expressions, can be done at compile time. \nPurity in this context means it doesn't matter if it's actually evaluated at runtime; \n`print(4)` is *impure*, because if you removed it, the program would work differently. \nA *pure* expression can be removed without affecting the program, \n`7 + 8` does not need to be computed at runtime if the program does not use the resulting sum. \nThere's also no need to do `2+2` at runtime when the compiler can just insert `4`, because addition is pure.\nGiven this, we can somewhat reduce the amount of computation we'll do at compile time. In each of theses steps, we'll be continuing on from the function before it, so the input to this optimization step is the outputted function above from Constant Value Propagation.\n\n```kt\nfun main() {\n     val a = 7 \n     var c = 7 \n     c += 1\n     val b = 14 + foo(7) + c  // '7*2' can be changed to '14'\n     if(b < 7) error(\"reached illegal state\")\n     while(b > c) c+=c; \n     println(7 + b + c);\n}\n```\nThis is again, something that isn't very helpful without some other optimizations, which we'll get to below.\n\n### Inlining of functions\n\nWe can inline short functions into the original source code. This can sometimes increase execution speed for a couple reasons: The basic improvement is that we don't need to store the arguments, call, return, and get back the result. This is generally a smaller increase in speed, and is pretty much only important on short functions like `abs` or `max`, where the call overhead is comparable to the actual functionality.\n\nThe more important thing is that it brings more context into the caller function for the compiler to work with. Inlining lets the compiler optimize the callee in the context of the caller, instead of optimizing them separately. \n\nLets inline `foo` into our original function.\n```kt\nfun main() {\n     val a = 7 \n     var c = 7 \n     c += 1\n     val b = 14 + block@ {\n         val i = 7\n         return@block if(i < 2) 19 else 18\n     }() + c\n     if(b < 7) error(\"reached illegal state\")\n     while(b > c) c+=c; \n     println(7 + b + c);\n}\n```\nThis is getting into some more complex Kotlin syntax, but you can think of it like a block (several statements) being used as an expression. The `block@` allows it to return the value locally. As an example,\n```kt\nblock@ { return@block 1 + 20 } + 300\n```\nwould evaluate to `321`\n\nYou can see how we set `i` to the value we passed in for `i` in the original function, `7`.\n\nNow, we can optimize this further with expression folding and constant value propagation. We'll look at just the block for a second.\n```kt\nblock@ {\n    val i = 7\n    return@block if(7 < 2) 19 else 18\n}()\n```\n\n `if(7 < 2)` will clearly fold down to `true`, so we can simplify just down to `19`.\n ```kt\n block@ {\n     val i = 7\n     return@block 19\n }()\n ```\n Because this is kotlin, we can optimize `block@ { return@block 19 }` down to `19`. This gives us, back to our original function.\n ```kt\nfun main() {\n     val a = 7 \n     var c = 7 \n     c += 1\n     val b = 14 + 19 + c // note the 19 here\n     if(b < 7) error(\"reached illegal state\")\n     while(b > c) c+=c; \n     println(7 + b + c);\n}\n```\n\nAnd we can fold some more! \n```kt\nfun main() {\n    val a = 7 \n    var c = 7\n    c += 1\n    val b = 23 + c // added 14 and 19 together\n    if(b < 7) error(\"reached illegal state\")\n    while(b > c) c+=c; \n    println(7 + b + c);\n}\n```\n\nNow, this is great and all, but it isn't perfect. You or me could optimize this better, so we're going to need a couple more tools. \n\n### Dead Code Elimination\n\nDead Code Elimination, or DCE, is removing code that does nothing. This is a pretty simple reducement of the code\n- If a variable is not used, it can be reduced to the expression it's set to\n```kt\nval a = 7 + b// can turn to\n7 + b // just sitting there\n```\n- If an expression is not used, and it is pure, it can be deleted\n```kt\n7 // would be allowed to deleted\n```\n- If an expression is not used, and the outer layer is pure, the outer layer can be deleted\n```kt\nfoo() + bar() // if this exists, and is not used, it can be optimized to\nfoo(); bar() // with no add\n```\n- If some code is unreachable, it can be deleted. This one we won't touch on today as it's more language-specific\n```kt\nreturn 7\nprint(\"hi!\") // this line can be deleted as it will never be reached\n```\n\nWith these rules, we can delete the `a` variable from our program, and it's value `7` as it's pure.\n```kt\nfun main() {\n    // no more a lol\n    var c = 7 \n    c += 1\n    val b = 23 + c\n    if(b < 7) error(\"reached illegal state\")\n    while(b > c) c+=c; \n    println(7 + b + c);\n}\n```\n\nNow, this is pretty nice. However, it's not *that* good. It could be much better. And to do that, we're going to need some better tools\n\n### Static Single Assignment Form\n\nAlso known as SSA, this one is rather hard to implement in compilers. However, we'll give it a go.\n\nSSA is the idea \"what if, every variable was final, and we just made a new variable every single time we assigned it?\"\n\nFor example, a trivial program like\n```kt\nvar foo = 7\nfoo += foo*foo\n```\nmight look hard to optimize logically. If we use SSA, though, we get\n```kt\nval foo_0 = 7\nval foo_1 = foo_0 + foo_0 * foo_0\n```\nwhich can be optimized down to a perfect constant, `val foo_1 = 56`, trivially with the above methods. \n\nLet's run our program through SSA.\n```kt\nfun main() {\n    val c_0 = 7\n    c_1 = c_0 + 1\n    val b = 23 + c_1\n    if(b < 7) error(\"reached illegal state\")\n    while(b > c) c+=c; // wait a minute, what do we do here?\n    println(7 + b + c);\n}\n```\nThe answer is that we make a very fancy control flow graph, which recurs on itself, and has a finite amount of c_n variables.\n\nHowever, that is hard! We're going to skip that for now, and introduce a `c_mut` variable for when we need to do that\n```kt\nfun main() {\n    val c_0 = 7\n    val c_1 = c_0 + 1\n    val b = 23 + c_1\n    if(b < 7) error(\"reached illegal state\")\n    var c_mut = c_1\n    while(b > c_mut) c_mut+=c_mut\n    println(7 + b + c_mut);\n}\n```\n\nNow, you can see here it's trivial to evaluate large amounts of this code\n```kt\nfun main() {\n    val c_0 = 7\n    val c_1 = 7 + 1 // c_0 can be rolled into here, so we should really do\n    val c_1 = 8\n    val b = 23 + c_1 // we can also evaluate this simply, and we should actually just do\n    val b = 31 // 2^5-1, nice\n    if(31 < 7) error(\"reached illegal state\") // DCE can delete this statement as it'll never run, as well as the 'if' statement\n    var c_mut = c_1; // we'll wait on optimizing this for a bit\n    while(31 > c_mut) c_mut+=c_mut\n    println(7 + 31 + c_mut); // inlining of b, should really be\n    println(38 + c_mut) // evaluating the addition\n}\n```\nThat was a big mess of duplicate lines, so let's rewrite that\n```kt\nfun main() {\n    val c_0 = 7\n    val c_1 = 8\n    val b = 31\n    var c_mut = c_1; // we'll wait on optimizing this for a bit\n    while(31 > c_mut) c_mut+=c_mut\n    println(38 + c_mut) // evaluating the addition\n}\n```\nLet's run DCE real quick, as we can delete `c_0`, `c_1`, and `b`.\n```kt\nfun main() {\n    var c_mut = 8; // we'll wait on optimizing this for a bit\n    while(31 > c_mut) c_mut+=c_mut\n    println(38 + c_mut)\n}\n```\n\nNow, this is pretty damn good, what we've done already. \nHowever, because I added this at the beginning, I feel obligated to finish it off :p\n\n### How (not really) to do loops in SSA\n\nLet's make an assumption that normal compilers are unable to make: that the loop will terminate within 5 iterations.\nThis is the only way to solve this without a nice, recursive graph, which is hard to represent in a textual format.\nThis is *not* how this is done in actual compilers.\n\nSo, let's think about how we can remove this loop. We need to remember how while loops actually flow.\n```\n               /----------false-------\\       \nstart -> conditional ---true--> body-> \\---> rest of the program\n            /\\                  /\n             \\-----------------/\n```\nIf we want to remove the recursive structure here, we could do it manually just by repeating the conditional. Here's a loop that runs max 2 iterations\n```\n               /-------false------------------------------------------------\\/\nstart -> conditional --true--> body -> conditional --true--> body -------> rest of the program\n                                            \\--------false------------------/\\\n```\nWe could model this with an `if` statement,\n```kt\nif(cond) {\n    body\n    if(cond) {\n        body\n    }\n}\n```\nKnowing this, we can change our original program (*again, you need to remember that this only works when we have a small upper iteration limit*)\n```kt\nfun main() {\n    val c_10 = 8;\n    if(c_10 < 31) {\n        val c_11 = c_10 + c_10\n        if(c_11 < 31) {\n            val c_12 = c_11 + c_12\n            if(c_12 < 31) {\n                val c_13 = c_12 + c_12\n                if(c_13 < 31) {\n                    val c_14 = c_13 + c_13\n                    // at this point, c_14 is <31 (as per our assumption)\n                }\n            }\n        }\n    }\n    // we still have an issue here, what variable do we print here?\n    println(38 + c_???)\n}\n```\nThe answer to the `c_???` question is: there's not a great way to figure this out. Again, normal ~~people~~ compilers would use proper SSA and not have this problem. We'll just.. ignore it for now. The answer will be obvious after some - you guessed it! - expression folding and variable inlining.\n```kt\nfun main() {\n    val c_10 = 8;\n    if(/*c_10 < 31*/ true) {\n        //val c_11 = 8 + 8\n        val c_11 = 16\n        if(/*c_11 < 31*/ true) {\n            // val c_12 = 16 + 16\n            val c_12 = 32\n            if(/*c_12 < 31*/ false) {\n                /*val c_13 = c_12 + c_12 \n                if(c_13 < 31) {          // all of this can be deleted as the 'if' statement will evaluate to false, via DCE\n                    val c_14 = c_13 + c_13\n                }*/\n            }\n        }\n    }\n    println(38 + c_???)\n}\n```\nWith SSA, the lines between scopes are blurred\n```kt\nfun main() {\n    val c_10 = 8\n    val c_11 = 16\n    val c_12 = 32\n    println(38 + c_???)\n}\n```\nI guess we can assume our `c_???` to be `c_12`, as it's the last version of `c` ever set (remember that these are still just `c` in the original function), which gives us\n```kt\nfun main() {\n    val c_10 = 8\n    val c_11 = 16\n    val c_12 = 32\n    println(38 + 32)\n}\n```\n...DCE\n```kt\nfun main() {\n    println(38 + 32)\n}\n```\n...folding\n```kt\nfun main() {\n    println(70)\n}\n```\nWoo! We've perfectly optimized this program, in a logical process. For reference, here's the original function.\n```kt\nfun main() {\n     val a = 7\n     var c = a\n     c += 1\n     val b = a*2 + foo(a) + c\n     if(b < a) error(\"reached illegal state\")\n     while(b > c) c+=c; // do some fun doubling\n     println(a + b + c);\n}\n\nfun foo(i: Int): Int {\n    return if(i < 2) 19 else 18;\n}\n```"},{"id":9,"title":"Vehicles of Colorado","desc":"There's a lot of them","tags":["vechicles","colorado","non-tech","misc","unreleased"],"url":"vecicles-of-colorado","date":"2023-08-23","content":"![](/vehicles/minecart.jpg)\n1911 is the date on the alternator\n\n\n![](/vehicles/crane.jpg)\nI want one of these when I build my house\n\n\n![](/vehicles/airplane_tug.jpg)\n\n\n![](/vehicles/bus1.jpg)\n![](/vehicles/bus2.jpg)\nSeems like someone lives here? kinda wild\n\n\n![](/vehicles/corgie.jpg)\n\n\n![](/vehicles/old_car.jpg)\n\n\n![](/vehicles/airport_lift.jpg)\n\n\n![](/vehicles/ski_lift.jpg)\n\n\n![](/vehicles/plane1.jpg)\n\n\n![](/vehicles/airport_luxury.jpg)\n\n\n![](/vehicles/tug.jpg)"}]},"__N_SSG":true}